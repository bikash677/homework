#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
    vector<vector<int>> dist;
    int n = points.size();

    for (int i = 0; i < n; i++) {
        dist.push_back({points[i][0] * points[i][0] + points[i][1] * points[i][1], points[i][0], points[i][1]});
    }

    sort(dist.begin(), dist.end());

    vector<vector<int>> ans;
    for (int i = 0; i < k; i++) {
        ans.push_back({dist[i][1], dist[i][2]});
    }

    return ans;
}

int main() {
    int N1 = 2, k1 = 1;
    vector<vector<int>> points1 = {{1, 3}, {-2, 2}};

    cout << "Example 1:" << endl;
    cout << "Input:" << endl;
    cout << N1 << " " << k1 << endl;
    for (int i = 0; i < N1; ++i) {
        cout << points1[i][0] << " " << points1[i][1] << endl;
    }

    vector<vector<int>> result1 = kClosest(points1, k1);

    cout << "Output:" << endl;
    for (const vector<int>& point : result1) {
        cout << point[0] << " " << point[1] << endl;
    }

    return 0;
}
